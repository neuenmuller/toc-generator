"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.main = void 0;
const core_1 = require("@actions/core");
const context_1 = require("@actions/github/lib/context");
const github_action_helper_1 = require("@technote-space/github-action-helper");
const misc_1 = require("./utils/misc");
const process_1 = require("./utils/process");
const { showActionInfo } = github_action_helper_1.ContextHelper;
const getLogger = (logger) => logger !== null && logger !== void 0 ? logger : new github_action_helper_1.Logger();
/* istanbul ignore next */
const getContext = (option) => { var _a; return (_a = option.context) !== null && _a !== void 0 ? _a : new context_1.Context(); };
const getActionContext = (option) => __awaiter(void 0, void 0, void 0, function* () {
    return ({
        actionContext: getContext(option),
        actionDetail: option,
        cache: {},
    });
});
/**
 * @param {object} option option
 * @param {string} option.actionName action name
 * @param {string} option.actionOwner action owner
 * @param {string} option.actionRepo action repo
 * @param {Logger|undefined} option.logger logger
 * @param {string|undefined} option.message message
 * @return {Promise<void>} void
 */
function main(option) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        if (option.rootDir) {
            showActionInfo(option.rootDir, getLogger(option.logger), getContext(option));
        }
        const octokit = github_action_helper_1.Utils.getOctokit();
        if (!(yield misc_1.isTargetContext(octokit, yield getActionContext(option)))) {
            getLogger(option.logger).info((_a = option.notTargetEventMessage) !== null && _a !== void 0 ? _a : 'This is not target event.');
            return;
        }
        yield process_1.execute(octokit, yield getActionContext(option));
    });
}
exports.main = main;
/* istanbul ignore next */
/**
 * @param {object} option option
 * @param {Logger|undefined} option.logger logger
 * @param {string|undefined} option.message message
 * @return {void} void
 */
function run(option) {
    /* istanbul ignore next */
    main(option).catch(error => {
        console.log(error);
        core_1.setFailed(error.message);
    });
}
exports.run = run;
