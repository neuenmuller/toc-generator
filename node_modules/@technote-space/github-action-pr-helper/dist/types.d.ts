import { Context } from '@actions/github/lib/context';
import { GitHelper, Logger } from '@technote-space/github-action-helper';
export declare type ExecuteTask = (context: ActionContext, helper: GitHelper, logger: Logger) => Promise<CommandOutput>;
export declare type ActionDetails = {
    actionName: string;
    actionOwner: string;
    actionRepo: string;
    targetEvents?: {
        [key: string]: string | ((context: Context) => boolean) | (string | ((context: Context) => boolean))[];
    };
    installPackages?: string[];
    devInstallPackages?: string[];
    globalInstallPackages?: string[];
    executeCommands?: (string | ExecuteTask)[];
    commitMessage?: string;
    commitName?: string;
    commitEmail?: string;
    prBranchPrefix?: string;
    prBranchName?: string;
    prTitle?: string;
    prBody?: string;
    prBranchPrefixForDefaultBranch?: string;
    prBranchNameForDefaultBranch?: string;
    prTitleForDefaultBranch?: string;
    prBodyForDefaultBranch?: string;
    prBodyForComment?: string;
    prVariables?: string[];
    prDateFormats?: string[];
    prCloseMessage?: string;
    filterGitStatus?: string;
    filterExtensions?: string | string[];
    targetBranchPrefix?: string | string[];
    deletePackage?: boolean;
    includeLabels?: string | string[];
    checkDefaultBranch?: boolean;
    checkOnlyDefaultBranch?: boolean;
    triggerWorkflowMessage?: string;
    autoMergeThresholdDays?: string;
    labels?: string[];
    assignees?: string[];
    reviewers?: string[];
    teamReviewers?: string[];
    notCreatePr?: boolean;
};
export declare type MainArguments = ActionDetails & {
    logger?: Logger;
    notTargetEventMessage?: string;
    rootDir?: string;
    context?: Context;
};
export declare type ActionContext = {
    actionContext: Context;
    actionDetail: ActionDetails;
    isBatchProcess?: boolean;
    cache: {
        [key: string]: any;
    };
};
export declare type ProcessResult = {
    result: 'succeeded' | 'failed' | 'skipped' | 'not changed';
    detail: string;
    branch: string;
};
export declare type Null = null | undefined;
export declare type PayloadPullsParams = {
    [key: string]: any;
    number: number;
    'html_url'?: string;
    body?: string;
};
export declare type PullsParams = PayloadPullsParams & {
    number: number;
    id: number;
    head: {
        ref: string;
        user: {
            login: string;
        };
    };
    base: {
        repo: {
            name: string;
            owner: {
                login: string;
            };
        };
        ref: string;
    };
    title: string;
    'html_url': string;
};
export declare type CommandOutput = {
    command: string;
    stdout: string[];
    stderr: string[];
};
